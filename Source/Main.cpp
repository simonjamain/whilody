/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "MainComponent.h"
#include "CommandParser.hpp"
#include "BufferAnalyser.hpp"

#define LOWEST_FREQ 20.
#define HIGHEST_FREQ 8000.

#define BUFFER_SIZE 4096

#define USE_LEFT_CHANNEL true
#define USE_RIGHT_CHANNEL false

#define MIDI_CHANNEL 1
#define MIDI_INSTRUMENT 85//choir
#define MIDI_VELOCITY 127
//TODO: enable/disable dynamic velocity

void addNoteOn(MidiMessageSequence* midiMessageSequence, uint8 noteNumber, double timestamp, bool* isPlaying)
{
    MidiMessage noteOn = MidiMessage::noteOn(MIDI_CHANNEL, noteNumber, (uint8)MIDI_VELOCITY);
    noteOn.setTimeStamp(timestamp);
    midiMessageSequence->addEvent(noteOn);
    *isPlaying = true;
};
void addNoteOff(MidiMessageSequence* midiMessageSequence, uint8 noteNumber, double timestamp, bool* isPlaying)
{
    MidiMessage noteOff = MidiMessage::noteOff(MIDI_CHANNEL, noteNumber, (uint8)MIDI_VELOCITY);
    noteOff.setTimeStamp(timestamp);
    midiMessageSequence->addEvent(noteOff);
    *isPlaying = false;
};

//==============================================================================
class whilodyApplication  : public JUCEApplication
{
public:
    //==============================================================================
    whilodyApplication() {}

    const String getApplicationName() override       { return ProjectInfo::projectName; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed() override       { return true; }

    //==============================================================================
    void initialise (const String& commandLine) override
    {
        UnitTestRunner unitTestRunner;
        unitTestRunner.runAllTests();
        
        CommandParser commandParser(commandLine);
        
        AudioFormatManager audioFormatManager; audioFormatManager.registerBasicFormats();// TODO: precise which format we want to use
        
        FileInputStream soundStream(commandParser.getInputFile());
        
        AudioFormatReader* soundReader = audioFormatManager.createReaderFor(&soundStream);
        
        BufferAnalyser bufferAnalyser(LOWEST_FREQ,HIGHEST_FREQ);
        
        AudioSampleBuffer buffer(soundReader->numChannels, BUFFER_SIZE);
        
        int64 bufferSize = (int64)buffer.getNumSamples();
        int64 startSample = 0;
        int64 totalSamples = soundReader->lengthInSamples;
        
        //midi
        
        
        uint8 currNoteNumber = 0;
        bool isPlaying = false;
        /*
        while(startSample < totalSamples)
        {
            double timestamp = double(startSample) / double(soundReader->sampleRate);
            try
            {
                soundReader->read(&buffer, 0, (int)bufferSize, startSample, USE_LEFT_CHANNEL, USE_RIGHT_CHANNEL);
                
                uint8 noteNumber = bufferAnalyser.getPitch(buffer, soundReader->sampleRate);
                
                //do noteOn
                //printf("note: %d\n", note);
                if (!isPlaying)
                {
                    addNoteOn(&midiMessageSequence, noteNumber, timestamp, &isPlaying);
                    
                    printf("noteOn: %d\n", noteNumber);
                }else if (currNoteNumber != noteNumber)
                {
                    addNoteOff(&midiMessageSequence, currNoteNumber, timestamp, &isPlaying);
                    printf("noteOff: %d\n", currNoteNumber);
                    
                    addNoteOn(&midiMessageSequence, noteNumber, timestamp, &isPlaying);
                    printf("noteOn: %d\n", noteNumber);
                }
                currNoteNumber = noteNumber;
                
            } catch (BelowDetectionLevelException e)
            {
                //do noteOff
                if(isPlaying)
                {
                    addNoteOff(&midiMessageSequence, currNoteNumber, timestamp, &isPlaying);
                    printf("noteOff: %d\n", currNoteNumber);
                }
            }
            startSample += bufferSize;
        }*/
        //TODO send allnotesoff
        
        
        MidiMessageSequence midiMessageSequence;
        //midiMessageSequence.addEvent(MidiMessage::tempoMetaEvent(<#int microsecondsPerQuarterNote#>))
        midiMessageSequence.addEvent(MidiMessage::noteOn(1,69,uint8(127)), 0.0f);
        midiMessageSequence.addEvent(MidiMessage::allNotesOff(1), 64.0f);
        //midiMessageSequence.sort();
        
        MidiFile midiFile;
        midiFile.addTrack(midiMessageSequence);
        midiFile.setTicksPerQuarterNote(32);
        
        File outputFile(commandParser.getOutputFileName());
        if(!outputFile.deleteFile())//ensure file
        {
            throw "impossible d'Ã©crire sur le fichier";
        }
        FileOutputStream outputStream(outputFile);
        midiFile.writeTo(outputStream);
        outputStream.flush();
        
        // the window
        mainWindow = new MainWindow (getApplicationName());
    }

    void shutdown() override
    {
        // Add your application's shutdown code here..

        mainWindow = nullptr; // (deletes our window)
    }

    //==============================================================================
    void systemRequestedQuit() override
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted (const String& commandLine) override
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

    //==============================================================================
    /*
        This class implements the desktop window that contains an instance of
        our MainContentComponent class.
    */
    class MainWindow    : public DocumentWindow
    {
    public:
        MainWindow (String name)  : DocumentWindow (name,
                                                    Colours::lightgrey,
                                                    DocumentWindow::allButtons)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (new MainContentComponent(), true);

            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            // This is called when the user tries to close this window. Here, we'll just
            // ask the app to quit when this happens, but you can change this to do
            // whatever you need.
            JUCEApplication::getInstance()->systemRequestedQuit();
        }

        /* Note: Be careful if you override any DocumentWindow methods - the base
           class uses a lot of them, so by overriding you might break its functionality.
           It's best to do all your work in your content component instead, but if
           you really have to override any DocumentWindow methods, make sure your
           subclass also calls the superclass's method.
        */

    private:
        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainWindow)
    };

private:
    ScopedPointer<MainWindow> mainWindow;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (whilodyApplication)